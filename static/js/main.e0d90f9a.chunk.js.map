{"version":3,"sources":["serviceWorker.js","TodoList.js","TaskList.js","AddTask.js","index.js"],"names":["Boolean","window","location","hostname","match","TodoList","item","onEdit","onDelete","index","name","level","date","console","log","onClick","type","className","TaskList","props","list","map","key","AddTask","state","toDoList","toDoItem","isAdd","indexUpdate","_handleAddTask","alert","setState","concat","_isChangedName","e","target","value","_isChangeLevel","_isChangeDate","_handleEdit","find","i","_handleDelete","filter","_handleCancel","_handleUpdate","this","placeholder","onChange","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e0d90f9a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst TodoList = ({item, onEdit, onDelete, index}) => {\n    const {name, level, date} = item;\n    console.log(index)\n        return (\n            <tr>\n                <td>{name}</td>\n                <td>{level}</td>\n                <td>{date}</td>\n                <td>\n                    <button onClick={() => onEdit(index)} type=\"button\" className=\"btn btn-outline-warning mr-4\"><i className=\"far fa-edit\"></i> Edit</button> \n                   <button onClick={() => onDelete(index)} type=\"button\" className=\"btn btn-outline-danger\"><i className=\"far fa-trash-alt\"></i> Delete</button>\n                </td>\n            </tr>\n        );\n    }\n\nexport default TodoList;","import React from 'react';\nimport TodoList from './TodoList';\n\nconst TaskList = props => {\n    console.log(props)\n        return (\n            <div className=\"container\">\n                <table className=\"table table-bordered table-hover\">\n                    <thead>\n                        <tr>\n                            <th>Name of task</th>\n                            <th>Level of task</th>\n                            <th>Deadline</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {  props.list.map(function(item, index) {\n                                return <TodoList key={index} index={index} item={item} onEdit={props.onEdit} onDelete={props.onDelete}/>\n                            })}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n\nexport default TaskList;","import React, { Component } from 'react';\nimport TaskList from './TaskList';\n\nclass AddTask extends Component {\n   state = {\n            toDoList :[\n                {name: 'Learn HTML', level: 1, date: '2020-01-01'},\n                {name: 'Learn CSS', level: 2, date: '2020-01-01'},\n                {name: 'Learn JAVASCRIPT', level: 3, date: '2020-01-01'},\n                {name: 'Learn BOOTSTRAP', level: 4, date: '2020-01-01'},\n                {name: 'Learn JQUERY', level: 5, date: '2020-01-01'},\n            ],\n            toDoItem : {name: '',level: '1',date: ''},\n            isAdd: true,\n            indexUpdate: 0\n        };\n    \n    _handleAddTask = () => {\n        const {name, date} = this.state.toDoItem;\n        if(name === '' || date === ''){\n            if(name === '')\n                alert(\"Please enter the name\");\n            else\n                alert(\"Deadline is invalid\");\n        }else{\n            this.setState({\n                toDoList: this.state.toDoList.concat(this.state.toDoItem)\n            });\n        }\n        \n    }\n    _isChangedName = (e) => {\n        //console.log( {...this.state.toDoItem, name: e.target.value})\n        this.setState({\n            toDoItem: {...this.state.toDoItem, name: e.target.value}\n        })\n    }\n    _isChangeLevel = (e) => {\n        //console.log( {...this.state.toDoItem, level: e.target.value})\n\n        this.setState({\n            toDoItem: {...this.state.toDoItem, level: e.target.value}\n        })\n    }\n    _isChangeDate = (e) => {\n        //console.log( {...this.state.toDoItem, date: e.target.value})\n\n        this.setState({\n            toDoItem: {...this.state.toDoItem, date: e.target.value}\n        })\n    }\n    _handleEdit = (index) =>{\n        this.setState({\n            toDoItem: this.state.toDoList.find((item, i) => {\n                return i === index;\n            }),\n            isAdd: false,\n            indexUpdate: index\n        })\n    }\n    _handleDelete = (index) => {\n        this.setState({\n            toDoList: this.state.toDoList.filter((item, i) => {\n                return i !== index;\n            })\n        })\n    }\n\n    _handleCancel = () => {\n        this.setState({\n            isAdd: true,\n            toDoItem: {name: '',level: '1',date: ''}\n        })\n    }\n\n    _handleUpdate = () => {\n        this.setState({\n            toDoList: this.state.toDoList.map((item, index) =>\n              index === this.state.indexUpdate ? this.state.toDoItem : item\n            ),\n            isAdd: true\n          });\n    }\n\n    render() {\n            const {toDoItem, isAdd, toDoList} = this.state;\n            const {name, level, date} = toDoItem;\n            return (\n                <div>\n                    <div className=\"container mb-4\">\n                        <h2 className=\"text-center font-weight-bold text-info mt-4\">TO DO LIST</h2>\n                        <div className=\"row\">\n                            <div className=\"col-4\">\n                                <div className=\"form-group\">\n                                    <label>Name</label>\n                                    <input type=\"text\" value={name} className=\"form-control\" placeholder=\"Enter name of task\" onChange={this._isChangedName} />\n                                </div>\n                            </div>\n                            <div className=\"col-4\">\n                                <div className=\"form-group\">\n                                    <label>Level</label>\n                                    <select className=\"form-control\" value={level} onChange={this._isChangeLevel}>\n                                        <option value=\"1\">1</option>\n                                        <option value=\"2\">2</option>\n                                        <option value=\"3\">3</option>\n                                        <option value=\"4\">4</option>\n                                        <option value=\"5\">5</option>\n                                    </select>\n                                </div>\n                            </div>\n                            <div className=\"col-4\">\n                                <div className=\"form-group\">\n                                    <label>Deadline</label>\n                                    <input type=\"date\" className=\"form-control\" value={date} onChange={this._isChangeDate} />\n                                </div>\n                            </div>\n                        </div>  \n                        {!isAdd ? (\n                            <div>\n                                <button type=\"submit\" className=\"btn btn-primary mr-2\" onClick={this._handleUpdate}><i className=\"far fa-save\"></i> Save</button>\n                                <button type=\"submit\" className=\"btn btn-secondary\" onClick={this._handleCancel}><i className=\"fas fa-ban\"></i> Cancel</button>\n                            </div>\n                        ) : (\n                         <button type=\"submit\" className=\"btn btn-info\" onClick={this._handleAddTask}><i className=\"fas fa-plus-circle\"></i> Add</button>\n\n                        )}\n                    </div>\n                    <TaskList onEdit={this._handleEdit} onDelete={this._handleDelete} list={toDoList} />\n\n                </div>\n            );\n        }\n}\n\nexport default AddTask;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport AddTask from './AddTask';\n\nReactDOM.render(<AddTask />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}